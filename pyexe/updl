#!/usr/bin/env python3
# vim:fileencoding=utf-8

import os, sys
import time
from utils import filesize
from functools import lru_cache
from subprocess import getoutput
try:
  from notify import notify
except ImportError:
  pass
n = notify('updl server 开始运行')
n.show()

logfile = open(os.path.expanduser('~/etc/log/updl.access.log'), 'a', buffering=1)

import bottle
from bottle import route, run, request, redirect, static_file, template, ServerAdapter

ROOT_DIR   = os.path.expanduser('~/scripts/python/pyother/updl')
STATIC_DIR = os.path.join(ROOT_DIR, 'static')
UPLOAD_DIR = os.path.expanduser('~/tmpfs/.upload')
DOWNLD_DIR = os.path.expanduser('~/.nginx/www/dl')
TEMPLATE_PATH = os.path.join(ROOT_DIR, 'view')
if not os.path.exists(UPLOAD_DIR):
  os.mkdir(UPLOAD_DIR)
bottle.TEMPLATE_PATH = [TEMPLATE_PATH]

class DotDict: pass

@route('/')
def blog():
  return redirect('http://lilydjwg.is-programmer.com/', 301)

@route('/favicon.ico')
def favicon():
  return static_file('favicon.ico', root='/var/www')

@route('/updl/upload', method='GET')
def uploader():
  # 腾讯
  if request.header.get('user-agent') in ('Mozilla/4.0', None):
    raise bottle.HTTPError(403, 'Forbidden')

  return static_file('upload.html', root=ROOT_DIR)

@route('/updl/success', method='GET')
def uploader():
  return static_file('success.html', root=ROOT_DIR)

@route('/updl/upload', method='POST')
def do_upload():
  files = request.files.getall('file')
  for f in files:
    name = f.filename
    try:
      name = name.encode('latin1').decode('utf-8')
    except:
      pass
    data = f.file.read(4096)
    outfile = os.path.join(UPLOAD_DIR, name)
    if os.path.exists(outfile):
      outfile += '.1'
    out = open(outfile, 'wb')
    while data:
      out.write(data)
      data = f.file.read(4096)
    n.update('%s 已上传。' % name)
  redirect('/updl/success', 302)

@route('/static/:path#.+#')
def server_static(path):
  # 腾讯
  if request.header.get('user-agent') in ('Mozilla/4.0', None):
    raise bottle.HTTPError(403, 'Forbidden')

  return static_file(path, root=STATIC_DIR)

@route('/updl/dl')
def dir_redirect():
  redirect('/updl/dl/', 301)

@route('/updl/dl/:path#.*#')
def download(path):
  # 腾讯
  if request.header.get('user-agent') in ('Mozilla/4.0', None):
    raise bottle.HTTPError(403, 'Forbidden')

  path = path.lstrip('/')
  try:
    path = path.encode('latin1').decode('utf-8')
  except (UnicodeEncodeError, UnicodeDecodeError):
    pass
  realpath = os.path.join(DOWNLD_DIR, path)
  if os.path.isdir(realpath):
    if path and not path.endswith('/'):
      redirect('/updl/dl/%s/' % path, 301)
    if os.path.exists(os.path.join(realpath, 'index.html')):
      return static_file('index.html', root=realpath)
    files = []
    dirs = []
    for i in os.listdir(realpath):
      f = DotDict()
      f.name = i
      ri = os.path.join(realpath, i)
      try:
        st = os.stat(ri)
      except OSError:
        continue
      f.size = filesize(st.st_size)
      f.time = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(st.st_mtime))
      if os.path.isdir(ri):
        f.name += '/'
        dirs.append(f)
      else:
        files.append(f)
    dirs.sort(key=lambda x: x.name)
    files.sort(key=lambda x: x.name)
    return template('listdir', files=dirs+files, path=path)
  else:
    return static_file(path, DOWNLD_DIR)

class WSGIRefServer(ServerAdapter):
  def run(self, handler):
    from wsgiref.simple_server import make_server, WSGIRequestHandler
    class ApacheHandler(WSGIRequestHandler):
      def log_request(self, code='-', size='-'):
        # 127.0.0.1 - - [27/Feb/2011:13:16:13 +0800] "GET /wiki/skins/common/images/poweredby_mediawiki_88x31.png HTTP/1.1" 200 2225 "http://localhost/wiki/index.php/Iptables" "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.13) Gecko/20101206 Ubuntu/10.10 (maverick) Firefox/3.6.13"
        print('{ip} ({domain}) - {user} [{date}] "{statusline}" {code} {length} "{referer}" "{UA}"'.format(
            ip         = self.client_address[0],
            domain     = lookupip(self.client_address[0]),
            user       = self.headers.get('remote-user') or '-',
            date       = self.log_date_time_string(),
            statusline = self.requestline,
            code       = str(code),
            length     = str(size),
            referer    = self.headers.get('http-referer') or '-',
            UA         = self.headers.get('user-agent') or '-',
          ),
          file=logfile
        )
    self.options['handler_class'] = ApacheHandler
    srv = make_server(self.host, self.port, handler, **self.options)
    srv.serve_forever()

@lru_cache(maxsize=20)
def lookupip(ip):
  print('cip called')
  return getoutput('cip ' + ip).replace('CZ88.NET', '').strip() or '-'

if __name__ == '__main__':
  # bottle.debug(True)
  run(port='4323', host='0.0.0.0',
      server=WSGIRefServer,
      reloader=True,
     )

