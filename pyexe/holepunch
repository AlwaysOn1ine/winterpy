#!/usr/bin/env python3

import os
import re
import sys
import socket
import time
import subprocess
import argparse

udp_server = ('xmpp.vim-cn.com', 2727)
addr_re = re.compile(r"\('(?P<ip>[^']+)', (?P<port>\d+)")

def parse_addr(s, start=0):
  m = addr_re.search(s, start)
  if not m:
    print("Error: can't parse address:", s)
    sys.exit(2)
  return m.group('ip'), int(m.group('port')), m.end()

def main(server, prog):
  sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
  sock.settimeout(2)
  print('Send message...')
  # for self ip
  sock.connect(udp_server)
  sock.send(b'req from holepunch.py\n')
  msg, addr = sock.recvfrom(1024)
  m_ip, m_port, _ = parse_addr(msg.decode())
  ip, port = sock.getsockname()
  print('Got my IP and Port: (%r, %s), (%r, %s).' % (m_ip, m_port, ip, port))
  # this seems to not work
  # http://stackoverflow.com/a/16830591/296473
  sock.connect(('0.0.0.0', 0))

  msg = input('> Peer address: ')
  p_ip, p_port, e = parse_addr(msg)
  c_ip, c_port, _ = parse_addr(msg, e)

  print('send initial packet and wait for answer...')
  sock.sendto(b'HELO\n', (p_ip, p_port))
  try:
    msg = sock.recvfrom(1024)
    print('Received:', msg)
  except socket.timeout:
    print("Timed out (it's normal).")

  if server:
    globals()['sprog_' + prog](sock, port, c_ip, c_port, m_ip, m_port, p_ip, p_port)
  else:
    globals()['cprog_' + prog](sock, port, c_ip, c_port, m_ip, m_port, p_ip, p_port)

def sprog_mosh(sock, port, c_ip, c_port, m_ip, m_port, p_ip, p_port):
  sock.close()
  print('Starting mosh server...')
  msg = subprocess.check_output(['mosh-server', 'new', '-p', str(port)])
  secret = msg.split()[3].decode()
  print('Connect with:\nMOSH_KEY=%s MOSH_CPORT=%s mosh-client %s %s' % (secret, c_port, m_ip, m_port))

def cprog_mosh(*args):
  print('done.')

def sprog_openvpn(sock, port, c_ip, c_port, m_ip, m_port, p_ip, p_port):
  stmpl = '''\
dev tun
proto udp
port {port}
mssfix 1400
keepalive 10 60

ca /etc/openvpn/easy-rsa/keys/ca.crt
cert /etc/openvpn/easy-rsa/keys/server.crt
key /etc/openvpn/easy-rsa/keys/server.key
dh /etc/openvpn/easy-rsa/keys/dh1024.pem

user nobody
group nobody
server 10.7.0.0 255.255.255.0

persist-key
persist-tun

client-to-client
comp-lzo
'''
  ctmpl = '''\
client
max-routes 2048
dev tun
remote {m_ip} {m_port} udp
resolv-retry infinite
local {c_ip}
port {c_port}
mssfix 1400
keepalive 10 60
persist-key
persist-tun
ns-cert-type server
comp-lzo
verb 3
route-nopull
route 10.7.0.0 255.255.255.0
'''
  with open('hole_s.ovpn', 'w') as f:
    s = stmpl.format(port=port)
    f.write(s)
  sconfig = os.path.join(os.getcwd(), 'hole_s.ovpn')

  s = ctmpl.format(
    m_ip=m_ip, m_port=m_port,
    c_ip=c_ip, c_port=c_port
  ).encode()
  print('sending client-side config to %s:%d...' % (p_ip, p_port))

  sock.settimeout(1)
  sock.connect((p_ip, p_port))
  for i in range(5):
    try:
      sock.sendto(s, (p_ip, p_port))
      msg, addr = sock.recvfrom(1024)
      if msg == b'ok':
        break
    except socket.timeout:
      pass
  else:
    print('ACK not received, starting anyway...')
  sock.close()

  print('client-side config sent. starting openvpn')
  p = subprocess.Popen(['sudo', '/usr/bin/openvpn', '--cd', '/etc/openvpn', '--config', sconfig])
  try:
    p.wait()
  except KeyboardInterrupt:
    p.wait()

def cprog_openvpn(sock, port, c_ip, c_port, m_ip, m_port, p_ip, p_port):
  print('receiving config')
  sock.settimeout(20)
  sock.connect((p_ip, p_port))
  while True:
    msg = sock.recv(1024)
    if not msg.strip().startswith(b'client'):
      continue
    sock.send(b'ok')
    sock.close()
    break
  with open('hole.ovpn', 'w') as f:
    f.write(msg.decode())
    auth = args.auth.read()
    f.write(auth)
  print('config received as hole.ovpn')
  os.execvp('sudo', ['sudo', 'openvpn', 'hole.ovpn'])

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description='permform UDP hole punching and run some program')
  parser.add_argument('-s', '--server', action='store_true', default=False,
                      help='server-side')
  parser.add_argument('prog', metavar='PROG', default='mosh', nargs='?',
                      help='program to run via the hole')

  parser.add_argument('-a', '--auth', type=open,
                      help='OpenVPN auth info file (client)')
  args = parser.parse_args()

  if 'sprog_' + args.prog not in globals():
    sys.exit("don't know how to cope with program %r" % args.prog)

  main(args.server, args.prog)
