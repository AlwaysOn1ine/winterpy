#!/usr/bin/env python3
# vim:fileencoding=utf-8

'''
sed 不能处理很多高级的正则，那就用 python 吧

2010年8月23日
'''

import os, sys, re
from sys import argv

version = '0.1'

def sub(pattern, repl, streamin, streamout):
  for l in streamin:
    n = pattern.sub(repl, l)
    streamout.write(n)

def usage():
  print('%s [OPTIONS] pattern repl FILE...' % os.path.basename(sys.argv[0]))
  print('''
Options:
  -v, --version   show version and exit
  -h, --help      show this help and exit
  -i, --in-place  edit files in place

If no FILE specified, read from stdin.''')

def showversion():
  print('%s %s' % (os.path.basename(sys.argv[0]), version))

if __name__ == '__main__':
  if '-v' in argv or '--version' in argv:
    showversion()
    sys.exit()
  elif '-h' in argv or '--help' in argv:
    usage()
    sys.exit()
  elif '-i' in argv or '--in-place' in argv:
    try:
      argv.remove('-i')
    except ValueError:
      argv.remove('--in-place')
    if len(argv) == 3:
      print('in-place editing specified, but no file specified.', file=sys.stderr)
      sys.exit(2)
    elif len(argv) < 3:
      usage()
      sys.exit(1)
    import io
    for f in argv[3:]:
      out = io.StringIO()
      sub(re.compile(sys.argv[1]), sys.argv[2], open(f), out)
      open(f, 'w').write(out.getvalue())
      out.close()
  elif len(argv) == 3:
    sub(re.compile(sys.argv[1]), sys.argv[2], sys.stdin, sys.stdout)
  elif len(argv) > 3:
    for f in argv[3:]:
      sub(re.compile(sys.argv[1]), sys.argv[2], open(f), sys.stdout)
  else:
    usage()
    sys.exit(1)
